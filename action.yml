name: 'Claude Copilot Action'
description: 'GitHub Action –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Claude Code —Å GitHub Issues –∏ Pull Requests —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ª–µ–π–±–ª–æ–≤'
author: 'Your Name'

branding:
  icon: 'cpu'
  color: 'purple'

inputs:
  anthropic_api_key:
    description: 'Anthropic API key (required for direct API)'
    required: false
  
  use_oauth:
    description: 'Use Claude AI OAuth authentication instead of API key (for Claude Max subscribers)'
    required: false
    default: 'false'
  
  claude_access_token:
    description: 'Claude AI OAuth access token (required when use_oauth is true)'
    required: false
  
  claude_refresh_token:
    description: 'Claude AI OAuth refresh token (required when use_oauth is true)'
    required: false
  
  claude_expires_at:
    description: 'Claude AI OAuth token expiration timestamp (required when use_oauth is true)'
    required: false
  
  github_token:
    description: 'GitHub token with repo and pull request permissions'
    required: false
    default: ${{ github.token }}
  
  trigger_phrase:
    description: 'The trigger phrase to look for in comments'
    required: false
    default: '@claude'
  
  assignee_trigger:
    description: 'The assignee username that triggers the action (e.g. claude)'
    required: false
  
  label_trigger:
    description: 'The label that triggers the action'
    required: false
    default: 'claude'
  
  model:
    description: 'Claude model to use'
    required: false
    default: 'claude-3-5-sonnet-20241022'
  
  max_turns:
    description: 'Maximum number of conversation turns'
    required: false
    default: '20'
  
  timeout_minutes:
    description: 'Timeout in minutes for execution'
    required: false
    default: '30'
  
  allowed_tools:
    description: 'Tools that Claude can use (pipe-separated list)'
    required: false
    default: |
      Bash(git:*),
      View,
      Edit,
      GlobTool,
      GrepTool,
      BatchTool
  
  custom_instructions:
    description: 'Additional custom instructions for Claude'
    required: false
    default: ''
  
  claude_env:
    description: 'Custom environment variables to pass to Claude (YAML format)'
    required: false
    default: ''
  
  use_bedrock:
    description: 'Use Amazon Bedrock instead of direct API'
    required: false
    default: 'false'
  
  use_vertex:
    description: 'Use Google Vertex AI instead of direct API'
    required: false
    default: 'false'
  
  base_branch:
    description: 'Base branch for creating new branches (defaults to repository default)'
    required: false
  
  branch_prefix:
    description: 'Prefix for Claude branches'
    required: false
    default: 'claude/'

outputs:
  execution_file:
    description: 'Path to the Claude execution output file'
    value: ${{ steps.claude.outputs.execution_file }}
  
  conclusion:
    description: 'Conclusion of the Claude execution (success/failure)'
    value: ${{ steps.claude.outputs.conclusion }}
  
  branch_name:
    description: 'Name of the branch created or used'
    value: ${{ steps.determine_context.outputs.branch_name }}

runs:
  using: 'composite'
  steps:
    - name: Debug event info
      shell: bash
      run: |
        echo "üîç DEBUG: Action triggered"
        echo "Event: ${{ github.event_name }}"
        echo "Action: ${{ github.event.action }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Trigger actor: ${{ github.actor }}"
        if [[ "${{ github.event_name }}" == "issues" ]]; then
          echo "Issue number: ${{ github.event.issue.number }}"
          echo "Issue title: ${{ github.event.issue.title }}"
          echo "Label: ${{ github.event.label.name }}"
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "PR number: ${{ github.event.pull_request.number }}"
          echo "PR title: ${{ github.event.pull_request.title }}"
          echo "PR body: ${{ github.event.pull_request.body }}"
        fi
        
    - name: Check triggers
      id: check_triggers
      shell: bash
      run: |
        echo "üîç Checking triggers..."
        echo "Event name: ${{ github.event_name }}"
        echo "Event action: ${{ github.event.action }}"
        
        SHOULD_RUN="false"
        TRIGGER_TYPE=""
        
        # Check for different trigger types
        if [[ "${{ github.event_name }}" == "issue_comment" ]] || [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
          if [[ "${{ github.event.comment.body }}" == *"${{ inputs.trigger_phrase }}"* ]]; then
            SHOULD_RUN="true"
            TRIGGER_TYPE="comment"
          fi
        elif [[ "${{ github.event_name }}" == "pull_request_review" ]]; then
          if [[ "${{ github.event.review.body }}" == *"${{ inputs.trigger_phrase }}"* ]]; then
            SHOULD_RUN="true"
            TRIGGER_TYPE="review"
          fi
        elif [[ "${{ github.event_name }}" == "issues" ]] && [[ "${{ github.event.action }}" == "assigned" ]]; then
          if [[ "${{ github.event.assignee.login }}" == "${{ inputs.assignee_trigger }}" ]]; then
            SHOULD_RUN="true"
            TRIGGER_TYPE="assignee"
          fi
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # Check if this is a PR created by our webhook
          if [[ "${{ github.event.pull_request.body }}" == *"This PR was automatically created in response to labeling issue #"* ]]; then
            SHOULD_RUN="true"
            TRIGGER_TYPE="webhook_pr"
          fi
        fi
        
        echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT
        echo "trigger_type=$TRIGGER_TYPE" >> $GITHUB_OUTPUT
        
        if [[ "$SHOULD_RUN" == "true" ]]; then
          echo "‚úÖ Trigger detected: $TRIGGER_TYPE"
        else
          echo "‚è≠Ô∏è No trigger found, skipping..."
        fi

    - name: Determine context
      id: determine_context
      if: steps.check_triggers.outputs.should_run == 'true'
      shell: bash
      run: |
        echo "üìã Determining context..."
        
        # Initialize variables
        ISSUE_NUMBER=""
        PR_NUMBER=""
        BRANCH_NAME=""
        IS_NEW_TASK="false"
        
        # Determine context based on event
        if [[ "${{ github.event_name }}" == "issues" ]]; then
          # –û–±—ã—á–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, —Ç.–∫. –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º issues —á–µ—Ä–µ–∑ PR –æ—Ç –≤–µ–±—Ö—É–∫–∞
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          echo "‚ö†Ô∏è Direct issue event detected, but should be handled via webhook PR"
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          PR_NUMBER="${{ github.event.pull_request.number }}"
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          # Extract issue number from PR body if it's from webhook
          if [[ "${{ steps.check_triggers.outputs.trigger_type }}" == "webhook_pr" ]]; then
            ISSUE_NUMBER=$(echo "${{ github.event.pull_request.body }}" | grep -oP 'issue #\K\d+' || echo "")
            IS_NEW_TASK="false"  # PR —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤–µ–±—Ö—É–∫–æ–º
          fi
        elif [[ "${{ github.event_name }}" == "issue_comment" ]] || [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
          if [[ -n "${{ github.event.issue.pull_request }}" ]]; then
            PR_NUMBER="${{ github.event.issue.number }}"
            # We need to fetch the PR to get the branch name
            echo "Fetching PR details..."
          else
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            IS_NEW_TASK="true"
          fi
        fi
        
        echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "is_new_task=$IS_NEW_TASK" >> $GITHUB_OUTPUT

    - name: Add eyes reaction (for webhook PR)
      if: steps.check_triggers.outputs.should_run == 'true' && steps.check_triggers.outputs.trigger_type == 'webhook_pr'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const prNumber = '${{ github.event.pull_request.number }}';
          console.log(`üëÄ Adding eyes reaction to PR #${prNumber} created by webhook`);
          
          // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ PR –æ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: parseInt(prNumber),
            body: 'üëÄ Claude is starting work on this task...'
          });

    - name: Checkout repository
      if: steps.check_triggers.outputs.should_run == 'true'
      uses: actions/checkout@v4
      with:
        ref: ${{ steps.determine_context.outputs.branch_name }}
        token: ${{ inputs.github_token }}

    - name: Prepare prompt
      id: prepare_prompt
      if: steps.check_triggers.outputs.should_run == 'true'
      shell: bash
      run: |
        echo "üìù Preparing prompt for Claude..."
        
        PROMPT=""
        
        # Different prompts based on trigger type
        case "${{ steps.check_triggers.outputs.trigger_type }}" in
          "label"|"assignee"|"webhook_pr")
            PROMPT="You are working on issue #${{ steps.determine_context.outputs.issue_number }}.
            
            Please fetch the issue details and implement the requested changes.
            Work in the branch: ${{ steps.determine_context.outputs.branch_name }}
            
            After implementing changes:
            1. Commit your changes with descriptive messages
            2. Provide a summary of what you've done"
            ;;
          
          "comment"|"review")
            if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
              COMMENT_BODY=$(echo '${{ github.event.comment.body }}' | sed "s/${{ inputs.trigger_phrase }}//g")
              COMMENT_AUTHOR="${{ github.event.comment.user.login }}"
            else
              COMMENT_BODY=$(echo '${{ github.event.review.body }}' | sed "s/${{ inputs.trigger_phrase }}//g")
              COMMENT_AUTHOR="${{ github.event.review.user.login }}"
            fi
            
            PROMPT="A comment was posted by @${COMMENT_AUTHOR}:
            
            ${COMMENT_BODY}
            
            Please respond to this comment and implement any requested changes.
            Work in the existing branch: ${{ steps.determine_context.outputs.branch_name }}"
            ;;
        esac
        
        # Add custom instructions if provided
        if [[ -n "${{ inputs.custom_instructions }}" ]]; then
          PROMPT="${PROMPT}
          
          Additional instructions:
          ${{ inputs.custom_instructions }}"
        fi
        
        # Save prompt to file
        echo "$PROMPT" > /tmp/claude_prompt.txt
        echo "prompt_file=/tmp/claude_prompt.txt" >> $GITHUB_OUTPUT

    - name: Setup Node.js
      if: steps.check_triggers.outputs.should_run == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: Install Bun
      if: steps.check_triggers.outputs.should_run == 'true'
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: 1.2.11

    - name: Install Dependencies
      if: steps.check_triggers.outputs.should_run == 'true'
      shell: bash
      run: |
        cd ${GITHUB_ACTION_PATH}
        bun install
        
    - name: Install Claude Code
      if: steps.check_triggers.outputs.should_run == 'true'
      shell: bash
      run: |
        npm install -g @anthropic-ai/claude-code@latest
        
    - name: Run Claude Code
      id: claude
      if: steps.check_triggers.outputs.should_run == 'true'
      shell: bash
      env:
        # Pass all inputs as environment variables
        CLAUDE_CODE_ACTION: "1"
        INPUT_PROMPT_FILE: ${{ steps.prepare_prompt.outputs.prompt_file }}
        INPUT_MODEL: ${{ inputs.model }}
        INPUT_ANTHROPIC_API_KEY: ${{ inputs.anthropic_api_key }}
        INPUT_USE_OAUTH: ${{ inputs.use_oauth }}
        INPUT_CLAUDE_ACCESS_TOKEN: ${{ inputs.claude_access_token }}
        INPUT_CLAUDE_REFRESH_TOKEN: ${{ inputs.claude_refresh_token }}
        INPUT_CLAUDE_EXPIRES_AT: ${{ inputs.claude_expires_at }}
        INPUT_USE_BEDROCK: ${{ inputs.use_bedrock }}
        INPUT_USE_VERTEX: ${{ inputs.use_vertex }}
        INPUT_MAX_TURNS: ${{ inputs.max_turns }}
        INPUT_TIMEOUT_MINUTES: ${{ inputs.timeout_minutes }}
        INPUT_ALLOWED_TOOLS: ${{ inputs.allowed_tools }}
        INPUT_CLAUDE_ENV: ${{ inputs.claude_env }}
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        bun run ${GITHUB_ACTION_PATH}/src/index.ts
        
    - name: Post completion comment
      if: steps.check_triggers.outputs.should_run == 'true' && success()
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const issueOrPrNumber = '${{ steps.determine_context.outputs.pr_number }}' || '${{ steps.determine_context.outputs.issue_number }}';
          const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          if (issueOrPrNumber) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueOrPrNumber),
              body: `‚úÖ Claude has completed the task!\n\n[View workflow run](${runUrl})`
            });
          }
          
    - name: Handle errors
      if: steps.check_triggers.outputs.should_run == 'true' && failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const issueOrPrNumber = '${{ steps.determine_context.outputs.pr_number }}' || '${{ steps.determine_context.outputs.issue_number }}';
          const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          if (issueOrPrNumber) {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: parseInt(issueOrPrNumber),
              body: `‚ùå Claude encountered an error. Please check the [workflow logs](${runUrl}) for details.`
            });
          }
